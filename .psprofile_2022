Import-Module PSReadLine
Import-Module posh-git
Import-Module git-aliases -DisableNameChecking
Import-Module PSKubectlCompletion

Set-Location C:/

$env:POSH_THEMES_PATH = "C:\Users\clry\posh_themes"


oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\craver.omp.json" | Invoke-Expression

# fish-like autocomplete
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
#Set-PSReadLineOption -PredictionSource HistoryAndPlugin
Set-PSReadLineOption -EditMode Windows
Set-PSReadLineOption -PredictionSource History

Set-PSReadlineKeyHandler -Key "Ctrl+g" -Function AcceptSuggestion
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key "Ctrl+f" -Function ForwardWord


Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadLineOption -PredictionViewStyle ListView

Set-PSReadLineOption -BellStyle None

Set-PSReadLineKeyHandler -Chord "ctrl+g" -Function AcceptSuggestion
Set-PSReadLineKeyHandler -Chord "ctrl+b" -Function SwitchPredictionView
Set-PSReadLineKeyHandler -Key Tab -Function Complete
Set-PSReadLineKeyHandler -Key Ctrl+q -Function TabCompleteNext
Set-PSReadLineKeyHandler -Key Ctrl+Q -Function TabCompletePrevious

# Aliases
Set-Alias -Name tf -Value terraform -Option AllScope
Set-Alias -Name dockerc -Value Docker-Compose -Option AllScope
Set-Alias -Name k -Value kubectl -Option AllScope
Set-Alias -Name ktx -value kubectx -Option AllScope
Set-Alias -Name kns -value kubens -Option AllScope
Set-Alias -Name ictl -value istioctl -Option AllScope

# Kubenetes completion
Register-KubectlCompletion

### IDA specific
Import-Module C:\Projects\ICP-SOA-Platform\soa-module\SoaModule\SoaModule.psm1 -Force


## Completions

# https://cli.github.com/manual/gh_completion
try {
  gh --help | Out-Null
  gh completion -s powershell | Out-String | Invoke-Expression
}
catch {
  ;
}


$env:ICP_SOA_PLATFORM = 'C:\Projects\ICP-SOA-Platform'
$env:ICP_MESSAGING = 'C:\Projects\ICP-Messaging'
$env:ICP_STORAGE = 'C:\Projects\ICP-Storage'

$env:SOA_PROFILE_DIR = "$env:ICP_SOA_PLATFORM\soa-ps-profile"

$env:EDITOR = 'code --wait'
$env:KUBE_EDITOR = 'code --wait'
$env:SOA_MODULE = "$env:ICP_SOA_PLATFORM\soa-module\SoaModule\SoaModule.psm1"

$env:KUBECONFIG = "$ENV:USERPROFILE\.kube\config"

# Functions and aliases
function Set-LocationIcpSoaPlatform {
  Set-Location $env:ICP_SOA_PLATFORM
}

function Set-LocationIcpMessaging {
  Set-Location $env:ICP_MESSAGING
}

function Set-LocationIcpStorage {
  Set-Location $env:ICP_STORAGE
}

function Set-LocationProjects {
  Set-Location ($env:ICP_MESSAGING | Split-Path -Parent)
}

Set-Alias -Name soa -Value Set-LocationIcpSoaPlatform
Set-Alias -Name msg -Value Set-LocationIcpMessaging
Set-Alias -Name stor -Value Set-LocationIcpStorage
Set-Alias -Name proj -Value Set-LocationProjects


## PSReadLine smart quotations
###
### From PSReadLine sample profile
###

# https://github.com/PowerShell/PSReadLine/blob/master/PSReadLine/SamplePSReadLineProfile.ps1
# Smart insertion and deletion (backspace) of quotes, parens, square and curly brackets
# Save in history, parenthesize selection, expand aliases, cycle through quotes

### SMART INSERTION AND DELETION


$Arguments = @{
  Chord            = '(', '{', '['
  BriefDescription = 'InsertPairedBraces'
  Description      = 'Insert matching braces'
}
Set-PSReadLineKeyHandler @Arguments -ScriptBlock {
  param($key, $arg)

  $closeChar = switch ($key.KeyChar) {
    <#case#> '(' { [char]')'; break }
    <#case#> '{' { [char]'}'; break }
    <#case#> '[' { [char]']'; break }
  }

  $selectionStart = $null
  $selectionLength = $null
  [Microsoft.PowerShell.PSConsoleReadLine]::GetSelectionState([ref]$selectionStart, [ref]$selectionLength)

  $line = $null
  $cursor = $null
  [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

  if ($selectionStart -ne -1) {
    # Text is selected, wrap it in brackets
    [Microsoft.PowerShell.PSConsoleReadLine]::Replace($selectionStart, $selectionLength, $key.KeyChar + $line.SubString($selectionStart, $selectionLength) + $closeChar)
    [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($selectionStart + $selectionLength + 2)
  }
  else {
    # No text is selected, insert a pair
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$($key.KeyChar)$closeChar")
    [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
  }
}

$Arguments = @{
  Chord            = ')', ']', '}'
  BriefDescription = 'SmartCloseBraces'
  Description      = 'Insert closing brace or skip'
}
Set-PSReadLineKeyHandler @Arguments -ScriptBlock {
  param($key, $arg)

  $line = $null
  $cursor = $null
  [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

  if ($line[$cursor] -eq $key.KeyChar) {
    [Microsoft.PowerShell.PSConsoleReadLine]::SetCursorPosition($cursor + 1)
  }
  else {
    [Microsoft.PowerShell.PSConsoleReadLine]::Insert("$($key.KeyChar)")
  }
}

$Arguments = @{
  Chord            = 'Backspace'
  BriefDescription = 'SmartBackspace'
  Description      = 'Delete previous character or matching quotes/parens/braces'
}
Set-PSReadLineKeyHandler @Arguments -ScriptBlock {
  param($key, $arg)

  $line = $null
  $cursor = $null
  [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

  if ($cursor -gt 0) {
    $toMatch = $null
    if ($cursor -lt $line.Length) {
      switch ($line[$cursor]) {
        <#case#> '"' { $toMatch = '"'; break }
        <#case#> "'" { $toMatch = "'"; break }
        <#case#> ')' { $toMatch = '('; break }
        <#case#> ']' { $toMatch = '['; break }
        <#case#> '}' { $toMatch = '{'; break }
      }
    }

    if ($toMatch -ne $null -and $line[$cursor - 1] -eq $toMatch) {
      [Microsoft.PowerShell.PSConsoleReadLine]::Delete($cursor - 1, 2)
    }
    else {
      [Microsoft.PowerShell.PSConsoleReadLine]::BackwardDeleteChar($key, $arg)
    }
  }
}
