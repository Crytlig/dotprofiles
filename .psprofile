Import-Module PSReadLine
Import-Module posh-git
Import-Module git-aliases -DisableNameChecking
Import-Module PSKubectlCompletion

Set-Location C:/

$env:POSH_THEMES_PATH = "~/posh_themes"

oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\craver.omp.json" | Invoke-Expression

# fish-like autocomplete
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
#Set-PSReadLineOption -PredictionSource HistoryAndPlugin
Set-PSReadLineOption -EditMode Windows
Set-PSReadLineOption -PredictionSource History

Set-PSReadlineKeyHandler -Key "Ctrl+g" -Function AcceptSuggestion
Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
Set-PSReadLineKeyHandler -Key "Ctrl+f" -Function ForwardWord

Set-PSReadLineOption -PredictionSource History
Set-PSReadLineOption -HistorySearchCursorMovesToEnd
Set-PSReadLineOption -PredictionViewStyle ListView

Set-PSReadLineOption -BellStyle None

Set-PSReadLineKeyHandler -Chord "ctrl+g" -Function AcceptSuggestion
Set-PSReadLineKeyHandler -Chord "ctrl+b" -Function SwitchPredictionView
Set-PSReadLineKeyHandler -Key Tab -Function Complete
Set-PSReadLineKeyHandler -Key Ctrl+q -Function TabCompleteNext
Set-PSReadLineKeyHandler -Key Ctrl+Q -Function TabCompletePrevious

# Aliases
Set-Alias -Name tf -Value terraform -Option AllScope
Set-Alias -Name dockerc -Value Docker-Compose -Option AllScope
Set-Alias -Name k -Value kubectl -Option AllScope
Set-Alias -Name ktx -value kubectx -Option AllScope
Set-Alias -Name kns -value kubens -Option AllScope
Set-Alias -Name ictl -value istioctl -Option AllScope

# Navigation
function backdir() {
  Set-Location ..
}

Set-Alias -Name ".." -Value backdir -Option AllScope

# Set clipboard to current dir
function scpwd() {
  Set-Clipboard $pwd
}

# Kubenetes completion
Register-KubectlCompletion

### IDA specific
Import-Module C:\Projects\ICP-SOA-Platform\soa-module\SoaModule\SoaModule.psm1 -Force

function helmls() {
  helm ls -o json | ConvertFrom-Json | % name
}

## Completions

# https://cli.github.com/manual/gh_completion
try {
  gh --help | Out-Null
  gh completion -s powershell | Out-String | Invoke-Expression
}
catch {
  ;
}

### SMART INSERTION AND DELETION

$Arguments = @{
  Chord            = 'Backspace'
  BriefDescription = 'SmartBackspace'
  Description      = 'Delete previous character or matching quotes/parens/braces'
}
Set-PSReadLineKeyHandler @Arguments -ScriptBlock {
  param($key, $arg)

  $line = $null
  $cursor = $null
  [Microsoft.PowerShell.PSConsoleReadLine]::GetBufferState([ref]$line, [ref]$cursor)

  if ($cursor -gt 0) {
    $toMatch = $null
    if ($cursor -lt $line.Length) {
      switch ($line[$cursor]) {
        <#case#> '"' { $toMatch = '"'; break }
        <#case#> "'" { $toMatch = "'"; break }
        <#case#> ')' { $toMatch = '('; break }
        <#case#> ']' { $toMatch = '['; break }
        <#case#> '}' { $toMatch = '{'; break }
      }
    }

    if ($toMatch -ne $null -and $line[$cursor - 1] -eq $toMatch) {
      [Microsoft.PowerShell.PSConsoleReadLine]::Delete($cursor - 1, 2)
    }
    else {
      [Microsoft.PowerShell.PSConsoleReadLine]::BackwardDeleteChar($key, $arg)
    }
  }
}